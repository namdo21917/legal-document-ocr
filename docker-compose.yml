version: '3.8'
services:
  api:
    container_name: ocr_api
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
      - TESSERACT_CMD=/usr/bin/tesseract
      - POPPLER_PATH=/usr/lib/x86_64-linux-gnu/poppler
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./output:/app/output
      - ./static:/app/static
    networks:
      - ocr_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  postgres:
    container_name: postgres_db
    image: postgres:15.4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT}:5432"
    networks:
      - ocr_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.5
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - ocr_network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

networks:
  ocr_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data: 