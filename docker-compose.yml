services:
  api:
    container_name: ocr_api
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_HOSTNAME=postgres
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata
      - TESSERACT_CMD=/usr/bin/tesseract
      - POPPLER_PATH=/usr/bin
    volumes:
      - ./:/app
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./output:/app/output
      - ./static:/app/static
      - pip_cache:/root/.cache/pip
    networks:
      - ocr_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  postgres:
    container_name: postgres_db
    image: postgres:15.4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT}:5432"
    networks:
      - ocr_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.5
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - ocr_network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - ocr_network
    restart: always

  minio-client:
    image: minio/mc:latest
    container_name: minio_client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set myminio http://minio:9000 minioadmin minioadmin && \
        mc mb -p myminio/ocr-bucket || true && \
        mc policy set public myminio/ocr-bucket || true && \
        tail -f /dev/null
      "
    networks:
      - ocr_network
    restart: always

networks:
  ocr_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  pip_cache:
  minio_data: 